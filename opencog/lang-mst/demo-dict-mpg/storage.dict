%
% demo-dict-mpg -- Demo dictionary for disjunct parsing
%
% Configuration file for an Atomspace-based dictionary. It will use
% disjunct data in the AtomSpace to perform (conventional) parsing.
% If appropriate disjuncts cannot be found in the dictionary, (that is,
% if a complete parse is not possible), then word-pairs will be used
% to supplement the disjuncts.
%
% All config values can be left as-is; nothing here needs tweaking.
%
% See the `demo-atomese/storage.dict` file in the main Link Grammar
% distribution for detailed documentation.

% -----------------------
% Boilerplate: The dictionary is for English, the English locale
% should be used, and a version number.

#define dictionary-lang           en;
#define dictionary-locale         en_US.UTF-8;
#define dictionary-version-number 5.12.2;

% Use a copy of the database; we assume the CogServer is running and
% is using the "main" version.
#define storage-node "(RocksStorageNode "rocks:///home/opencog/data/mpg-parse-copy.rdb")";

% -----------------------
% Enable use of sections (disjuncts).
#define enable-sections 1;

% Disable extra pairs for just right now.
#define extra-pairs 0;
#define extra-any 0;

% -----------------------
% Pair config.
%
% We do NOT want to create disjuncts consisting purely of word-pairs,
% so this is disabled. However, existing disjuncts can be decorated
% with extra connectors, derived from word-pairs, and so we do need
% the config information on how to access these, and how to map them
% into Link Grammar.
%
% Disable use of word-pairs.
#define pair-disjuncts 0;

% Location where MI values are stored.
#define pair-predicate "(BondNode "ANY")";
#define pair-key "(Predicate "*-Mutual Info Key-*")";
#define pair-index 1;

% For small dictionaries, and MI or zero or more is needed, as
% otherwise there are just not enough pairs, and the ANY link starts
% getting uses. For larger dictionaries, an MI of 4 or larger makes
% sense.
#define pair-cutoff 0.0;

% If there's no MI, just reject it.
#define pair-default -10;

% Map the MI interval [0,4] to [1,0]. Thus, any MI of more than 4
% gets a negative cost and encourages loop formation. Links with an
% MI of less than 4 will get used, to "plug the hole", if there's
% nothing better.
#define pair-scale -0.25;
#define pair-offset 1.0;

% Keep in mind that the parser ranks parses from lowest to highest cost.
% If word-pair links have a negative cost, the parser is incentivized to
% add as many of these as possible, while still resulting in a planar
% graph with many loops. Viz, "Maximal Planar Graphs" (MPG). Conversely,
% if word-pair links have a positive cost, Minimal Spanning Trees (MST)
% will be created (minimizing the total cost.)

% A disjunct can consist of 4 pairs. Each pair can have a cost of at
% most 1.0. So we have to accept a max disjunct cost of at least 4.
#define max-disjunct-cost 4.5;

% Disable supplementation of pairs with "ANY" links.
#define pair-with-any 0;

% Disable expressions that consist entirely of "ANY" link-types.
#define any-disjuncts 0;

% Enble the automatic generation of <UNKNOWN-WORD>. It will be
% automatically added to the dictionary, with multi-ANY connectors
% on it. The ANY connectors will be used, irresepctive of the other
% `any` setting above.
#define enable-unknown-word 1;

% -----------------------
% Bogus entry. Cannot be empty.
foo: UNITS+;
